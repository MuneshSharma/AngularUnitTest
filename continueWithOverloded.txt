using System;
using System.Diagnostics;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

namespace MultiThreadingInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine($"Main Thread : {Thread.CurrentThread.ManagedThreadId} Started");

            Task<string> task1 = Task.Run(() =>
            {
                return Total(5);
            }).ContinueWith((info) =>
            {
                return "the result is " + info.Result;
            }).ContinueWith((atnecedent)=>{

                return "the new result is " + atnecedent.Result;

            });

            task1.ContinueWith((details) =>
            {
                Console.WriteLine(details.IsFaulted + " " + details.Exception?.Message + " " + details.IsCompleted + " " +
                    details.IsCanceled);
            });

            task1.ContinueWith((info) =>
            {
                Console.WriteLine("Task Faulted");
            },TaskContinuationOptions.OnlyOnFaulted);

            task1.ContinueWith((info) =>
            {
                Console.WriteLine("Task canceled");
            }, TaskContinuationOptions.OnlyOnCanceled);

           task1.ContinueWith((info) =>
            {
                Console.WriteLine("Task completed");
            }, TaskContinuationOptions.OnlyOnRanToCompletion);

            Console.WriteLine(task1.Result);

          
            Task.Delay(1000).Wait();
         
            Console.WriteLine($"Main Thread : {Thread.CurrentThread.ManagedThreadId} Completed");
            Console.ReadLine();
        }
      
        static int Total(int Max)
        {
            int sum = 0;
            Console.WriteLine($"Child Thread : {Thread.CurrentThread.ManagedThreadId} Started");
            for (int count = 1; count <= Max; count++)
            {
                sum = sum + count;
            }
            Console.WriteLine($"Child Thread : {Thread.CurrentThread.ManagedThreadId} Completed");
            return sum;
        }



    }

}